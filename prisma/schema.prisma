generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id                     String                   @id @default(uuid())
  name                   String
  imageUrl               String
  deliveryFee            Decimal                  @db.Decimal(10, 2)
  deliveryTimeMinutes    Int
  rating                 Decimal                  @default(3)
  Order                  Order[]
  Product                Product[]
  userFavoriteRestaurant UserFavoriteRestaurant[]
  categories             Category[]               @relation("CategoryToRestaurant")
}

model UserFavoriteRestaurant {
  userId       String
  restaurantId String
  createAt     DateTime   @default(now())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@id([userId, restaurantId])
}

model Category {
  id          String       @id @default(uuid())
  name        String
  imageUrl    String
  Product     Product[]
  restaurants Restaurant[] @relation("CategoryToRestaurant")
}

model Product {
  id                 String         @id @default(uuid())
  name               String
  description        String
  imageUrl           String
  price              Decimal        @db.Decimal(10, 2)
  discountPercentage Int            @default(0)
  restaurantId       String
  categoryId         String
  createAt           DateTime       @default(now())
  orderProduct       OrderProduct[]
  category           Category       @relation(fields: [categoryId], references: [id])
  restaurant         Restaurant     @relation(fields: [restaurantId], references: [id])
}

model OrderProduct {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id             String         @id @default(uuid())
  userId         String
  deliveryFee    Decimal        @db.Decimal(10, 2)
  subTotalPrice  Decimal        @db.Decimal(10, 2)
  totalPrice     Decimal        @db.Decimal(10, 2)
  totalDiscounts Int
  deliveryTime   Int
  restaurantId   String
  createAt       DateTime       @default(now())
  status         OrderStatus
  restaurant     Restaurant     @relation(fields: [restaurantId], references: [id])
  user           User           @relation(fields: [userId], references: [id])
  products       OrderProduct[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                     String                   @id @default(cuid())
  name                   String?
  email                  String?                  @unique
  emailVerified          DateTime?                @map("email_verified")
  image                  String?
  Order                  Order[]
  userFavoriteRestaurant UserFavoriteRestaurant[]
  accounts               Account[]
  sessions               Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum OrderStatus {
  CONFIRMED
  PREPARING
  DELIVERING
  COMPLETED
  CANCELED
}
