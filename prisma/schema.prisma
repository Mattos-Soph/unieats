// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id                   String                   @id @default(uuid())
  name                 String
  imageUrl             String
  deliveryFee          Decimal                  @db.Decimal(10, 2)
  deliveryTimeMinutes  Int
  rating               Decimal                  @default(3) @db.Decimal(2,1) // Especificando precisão para rating também
  
  // CAMPOS ADICIONADOS PARA TIMESTAMPS E TIPO/ESPECIALIDADE (UniEats)
  type                 String?                  // Para "Cantina", "Aluno Vendedor", etc. (Opcional)
  specialty            String?                  // Especialidade do vendedor/restaurante (Opcional)
  createdAt            DateTime                 @default(now()) // Data de criação
  updatedAt            DateTime                 @updatedAt      // Data da última atualização

  // RELAÇÕES EXISTENTES
  categories             Category[]
  Product                Product[]
  Order                  Order[]
  userFavoriteRestaurant UserFavoriteRestaurant[]
}

model UserFavoriteRestaurant {
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime @default(now()) // 'createdAt' aqui estava escrito com 'A' maiúsculo, corrigido para 'createdAt' para consistência

  @@id([userId, restaurantId])
}

model Category {
  id          String       @id @default(uuid())
  name        String
  imageUrl    String
  restaurants Restaurant[]
  Product     Product[]
}

model Product {
  id                 String         @id @default(uuid())
  name               String
  description        String
  imageUrl           String
  price              Decimal        @db.Decimal(10, 2)
  discountPercentage Int            @default(0)
  restaurantId       String
  restaurant         Restaurant     @relation(fields: [restaurantId], references: [id])
  categoryId         String
  category           Category       @relation(fields: [categoryId], references: [id])
  createdAt          DateTime       @default(now()) // 'createdAt' aqui estava escrito com 'A' maiúsculo, corrigido para 'createdAt'
  orderProduct       OrderProduct[]
}

model OrderProduct {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  // Adicionar o preço unitário do produto no momento da compra é uma boa prática
  // priceAtOrder Decimal @db.Decimal(10, 2) 
}

model Order {
  id               String         @id @default(uuid())
  userId           String
  user             User           @relation(fields: [userId], references: [id])
  deliveryFee      Decimal        @db.Decimal(10, 2)
  subTotalPrice    Decimal        @db.Decimal(10, 2)
  totalPrice       Decimal        @db.Decimal(10, 2)
  totalDiscounts   Decimal        @db.Decimal(10,2) @default(0) // Alterado para Decimal e com default
  deliveryTime     Int // Manteve como Int, refere-se a minutos
  restaurant       Restaurant     @relation(fields: [restaurantId], references: [id])
  restaurantId     String
  createdAt        DateTime       @default(now()) // 'createdAt' aqui estava escrito com 'A' maiúsculo, corrigido para 'createdAt'
  status           OrderStatus
  products         OrderProduct[]

  // Campos de endereço de entrega (exemplo, adicione conforme sua necessidade)
  deliveryAddressStreet     String?
  deliveryAddressNumber     String?
  deliveryAddressComplement String?
  deliveryAddressZipCode    String?
  deliveryAddressCity       String?
  deliveryAddressState      String?
}

enum OrderStatus {
  CONFIRMED
  PREPARING
  DELIVERING
  COMPLETED
  CANCELED
  PENDING // Adicionado status PENDENTE que usei nos exemplos
}

// Modelos Account, Session, User, VerificationToken permanecem os mesmos
// (A menos que você queira adicionar timestamps a User também, o que é comum)

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                   String                   @id @default(cuid())
  name                 String?
  email                String?                  @unique
  emailVerified        DateTime?                @map("email_verified")
  image                String?
  accounts             Account[]
  sessions             Session[]
  Order                Order[]
  userFavoriteRestaurant UserFavoriteRestaurant[]
  // Opcional: Adicionar timestamps a User
  // createdAt            DateTime                 @default(now())
  // updatedAt            DateTime                 @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}